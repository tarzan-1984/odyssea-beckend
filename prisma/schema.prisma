generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                  String                @id @default(cuid())
  email               String                @unique
  password            String?
  firstName           String
  lastName            String
  phone               String?
  profilePhoto        String?
  role                UserRole
  status              UserStatus            @default(INACTIVE)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  lastLoginAt         DateTime?
  location            String?
  city                String?
  state               String?
  zip                 String?
  deactivateAccount   Boolean?              @default(false)
  externalId          String?               @unique
  type                String?
  vin                 String?
  chatRooms           ChatRoomParticipant[]
  adminOfChatRooms    ChatRoom[]            @relation("ChatRoomAdmin")
  receivedMessages    Message[]             @relation("MessageReceiver")
  sentMessages        Message[]             @relation("MessageSender")
  notifications       Notification[]
  notificationsSent   NotificationSent[]
  passwordResetTokens PasswordResetToken[]
  refreshTokens       RefreshToken[]

  @@map("users")
}

model PasswordResetToken {
  id        String    @id @default(cuid())
  token     String    @unique
  userId    String
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model OtpCode {
  id        String   @id @default(cuid())
  email     String
  code      String
  expiresAt DateTime
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("otp_codes")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  type      String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  avatar    String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model NotificationSent {
  id               String   @id @default(cuid())
  userId           String
  chatRoomId       String?
  messageIds       String[]
  notificationType String
  sentAt           DateTime @default(now())
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications_sent")
}

model ChatRoom {
  id           String                @id @default(cuid())
  name         String?
  type         String
  loadId       String?
  isArchived   Boolean               @default(false)
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  avatar       String?
  adminId      String?               @map("admin")
  participants ChatRoomParticipant[]
  admin        User?                 @relation("ChatRoomAdmin", fields: [adminId], references: [id])
  messages     Message[]

  @@map("chat_rooms")
}

model ChatRoomParticipant {
  id              String   @id @default(cuid())
  chatRoomId      String
  userId          String
  joinedAt        DateTime @default(now())
  isHidden        Boolean  @default(false)
  mute            Boolean  @default(false)
  pin             Boolean  @default(false)
  hideParticipant Boolean  @default(false)
  chatRoom        ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([chatRoomId, userId])
  @@map("chat_room_participants")
}

model Message {
  id         String   @id @default(cuid())
  chatRoomId String
  senderId   String
  receiverId String?
  content    String
  fileUrl    String?
  fileName   String?
  fileSize   Int?
  createdAt  DateTime @default(now())
  readBy     Json?
  isRead     Boolean  @default(false)
  replyData  Json?    // JSON data about the message being replied to: {avatar, time, content, senderName}
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  receiver   User?    @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User     @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model FileObject {
  id        String   @id @default(cuid())
  key       String   @unique
  url       String
  mime      String?
  size      Int?
  userId    String?
  createdAt DateTime @default(now())
}

enum UserRole {
  DRIVER_UPDATES
  MODERATOR
  RECRUITER
  ADMINISTRATOR
  NIGHTSHIFT_TRACKING
  DISPATCHER
  BILLING
  SUBSCRIBER
  ACCOUNTING
  RECRUITER_TL
  TRACKING
  DISPATCHER_TL
  TRACKING_TL
  MORNING_TRACKING
  EXPEDITE_MANAGER
  DRIVER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING
}
